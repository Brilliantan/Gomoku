#include<graphics.h>
#include<conio.h>
#include<windows.h>
#include<stdio.h>
#include <time.h>
#pragma warning(disable:4996)

void menu();
void play();
void display();
void playgame();
void again(int index);
int a[9][9] = { 0 };

int main()
{
	initgraph(600, 600, SHOWCONSOLE);
	menu();
	system("pause");
	return 0;
}

void menu()
{
	IMAGE img;
	setaspectratio(1, 1);	//设置当前缩放因子
	loadimage(&img, L"timg.jpg", 100,100,false);// 从资源文件获取图像(bmp/jpg/gif/emf/wmf)
	putimage(-10, 0, &img, SRCPAINT);// 绘制图像到屏幕
	settextstyle(50, 20, "华文彩云");
	outtextxy(200, 400, "五子棋");	//// 在指定位置输出字符串
	MOUSEMSG m;
	while (true)
	{
		m = GetMouseMsg();
		if (m.uMsg == WM_MOUSEMOVE && m.x >= 200 && m.x <= 360 && m.y >= 400 && m.y <= 450)
		{
			setlinecolor(YELLOW);
			rectangle(200, 400, 360, 450);

		}
		if (m.uMsg == WM_LBUTTONDOWN && m.x >= 200 && m.x <= 360 && m.y >= 400 && m.y <= 450)
		{
			cleardevice();
			Sleep(500);
			play();
			break;
		}
		if (!(m.x >= 200 && m.x <= 360 && m.y >= 400 && m.y <= 450))
		{
			setlinecolor(BLACK);
			rectangle(200, 400, 360, 450);
		}
	}
}

void play()
{
	graphdefaults();
	setlinecolor(WHITE);
	settextstyle(15, 10, "宋体");
	settextcolor(WHITE);
	outtextxy(460, 80, "play1:红子:");
	outtextxy(460, 100, "步数: ");
	outtextxy(460, 160, "play2:黄子");
	outtextxy(460, 180, "步数: ");
	display();
}

void display()
{
	for (int i = 50; i <= 450; i += 50)
	{
		line(i, 50, i, 450);
		line(50, i, 450, i);
	}
	playgame();
}

void playgame()
{
	char str1[5];
	char str2[5];
	int bushu1 = 0, bushu2 = 0;
	memset(a, 0, sizeof(a));
	int play1 = 1;
	int i = 0, j = 0;
	int win = 0;
	MOUSEMSG msg;
	while (win == 0)
	{
		msg = GetMouseMsg();
		if (msg.uMsg == WM_LBUTTONDOWN)
		{
			for (int lie = 50; lie <= 450; lie += 50)
			{
				if (msg.x <= lie + 10 && msg.x >= lie - 10)
				{
					for (int hang = 50; hang <= 450; hang += 50)
					{
						if (msg.y <= hang + 10 && msg.y >= hang - 10)
						{
							if (play1 == 1 && a[hang / 50 - 1][lie / 50 - 1] == 0)
							{
								setfillcolor(RED);
								solidcircle(lie, hang, 12);
								a[hang / 50 - 1][lie / 50 - 1] = 1;
								play1 = 0;
								bushu1++;
								sprintf(str1, "%i", bushu1);
								outtextxy(520, 100, str1);
								break;
							}
							if (play1 == 0 && a[hang / 50 - 1][lie / 50 - 1] == 0)
							{
								setfillcolor(YELLOW);
								solidcircle(lie, hang, 12);
								a[hang / 50 - 1][lie / 50 - 1] = 2;
								play1 = 1;
								bushu2++;
								sprintf(str2, "%i", bushu2);
								outtextxy(520, 180, str2);
								break;
							}
						}
					}
				}
			}
		}
		//判断是否赢
		for (j = 0; j<9 && (win == 0); j++)
		{
			for (i = 0; i<6; i++)
			{

				if ((a[j][i] == 1 && a[j][i + 1] == 1 && a[j][i + 2] == 1 && a[j][i + 3] == 1 && a[j][i + 4] == 1)
					|| (a[i][j] == 1 && a[i + 1][j] == 1 && a[i + 2][j] == 1 && a[i + 3][j] == 1 && a[i + 4][j] == 1))//横纵是5个子play1 win
				{
					win = 1;
					Sleep(100);
					break;
				}
				if ((a[j][i] == 2 && a[j][i + 1] == 2 && a[j][i + 2] == 2 && a[j][i + 3] == 2 && a[j][i + 4] == 2)
					|| (a[i][j] == 2 && a[i + 1][j] == 2 && a[i + 2][j] == 2 && a[i + 3][j] == 2 && a[i + 4][j] == 2))//横纵是5个子play2 win
				{
					win = 2;
					Sleep(100);
					break;
				}
			}
		}
		for (j = 0; j<6 && (win == 0); j++)
		{
			for (i = 0; i<6; i++)
			{
				if (a[j][i] == 1 && a[j + 1][i + 1] == 1 && a[j + 2][i + 2] == 1 && a[j + 3][i + 3] == 1 && a[j + 4][i + 4] == 1)//向右倾斜时候play1 win
				{
					win = 1;
					Sleep(100);
					break;

				}
				if (a[j][i] == 2 && a[j + 1][i + 1] == 2 && a[j + 2][i + 2] == 2 && a[j + 3][i + 3] == 2 && a[j + 4][i + 4] == 2)//向右倾斜时候play2 win
				{
					win = 2;
					Sleep(100);
					break;
				}
			}
			for (i = 4; i<9 && (win == 0); i++)
			{
				if (a[j][i] == 1 && a[j + 1][i - 1] == 1 && a[j + 2][i - 2] == 1 && a[j + 3][i - 3] == 1 && a[j + 4][i - 4] == 1)//向左倾斜时候play1 win
				{
					win = 1;
					Sleep(100);
					break;
				}
				if (a[j][i] == 2 && a[j + 1][i - 1] == 2 && a[j + 2][i - 2] == 2 && a[j + 3][i - 3] == 2 && a[j + 4][i - 4] == 2)//向左倾斜时候play2 win
				{
					win = 2;
					Sleep(100);
					break;
				}
			}
		}
	}
	again(win);
}

void again(int index)
{
	settextstyle(20, 20, "宋体");
	settextcolor(YELLOW);
	if (index == 1)
	{
		outtextxy(220, 500, "play1 win!");
	}
	else
	{
		outtextxy(220, 500, "play2 win!");
	}
	int quit = MessageBox(NULL, "是否继续游戏", "ArchyLi", MB_YESNO);
	if (IDYES == quit)
	{
		cleardevice();
		play();
	}
	else
	{
		cleardevice();
		settextstyle(50, 30, "宋体");
		settextcolor(YELLOW);
		outtextxy(200, 300, "欢迎下次再来");
		Sleep(1000);
		return;
	}
}

//main 12.2 15:49
#include<graphics.h>
#include<cstdlib>
#include"gomoku.h"
#pragma warning(disable:4996)
using namespace std;


int main()
{
	//gomoku chessboard
	int Gomoku_CSBD[15][15];	
	initgraph(1200, 713, SHOWCONSOLE);
	menu(Gomoku_CSBD);
	system("pause");
	return 0;
}


//Gomoku_run.cpp 12.2 15:49
#include<iostream>
#include<graphics.h>
#include<conio.h>
#include<windows.h>
#include<stdio.h>
#include <time.h>
#include"gomoku.h"
using namespace std;

Status menu(int Gomoku_CSBD[15][15])	//主菜单
{
	int left, right, top, bottom;
	IMAGE bkgrd, start;
	setaspectratio(1, 1);	//设置当前缩放因子
	loadimage(&bkgrd, "start1.jpg", 1200, 713, true);// 从资源文件获取图像(bmp/jpg/gif/emf/wmf)
	putimage(0, 0, &bkgrd, SRCPAINT);// 绘制图像到屏幕
	left = 740;
	right = 945;
	top = 280;
	bottom = 385;
	MOUSEMSG m;
	while (true)
	{
		m = GetMouseMsg();
		if (m.uMsg == WM_MOUSEMOVE && m.x >= left && m.x <= right && m.y >= top && m.y <= bottom)
		{
			setlinecolor(LIGHTRED);
			setlinestyle(PS_SOLID, 3, NULL, 0);
			ellipse(left, top, right, bottom);
		}
		if (m.uMsg == WM_LBUTTONDOWN && m.x >= left && m.x <= right && m.y >= top && m.y <= bottom)
		{
			cleardevice();
			DrawBackground();
			playgame(Gomoku_CSBD);
			break;	//退出开始菜单
		}
		if (!(m.x >= left && m.x <= right && m.y >= top && m.y <= bottom))
		{
			setlinecolor(BLACK);
			setlinestyle(PS_SOLID, 3, NULL, 0);
			ellipse(left, top, right, bottom);
		}
	}
	return OK;
}

Status DrawBackground()	//画背景
{
	IMAGE playbk;
	int Kuan;
	Kuan = QiPanGeKuan * 15;
	loadimage(&playbk, "playbk.jpg", 1200, 713, false);// 从资源文件获取图像(bmp/jpg/gif/emf/wmf)
	putimage(0, 0, &playbk, SRCPAINT);// 绘制图像到屏幕
	graphdefaults();	//重置默认
	setbkcolor(BROWN);
	setlinecolor(WHITE);
	settextstyle(30, 20, "华文新魏");
	settextcolor(WHITE);
	outtextxy(QiPanGeKuan * 17, 80, "黑:");
	outtextxy(QiPanGeKuan * 17, 130, "步时: ");
	outtextxy(QiPanGeKuan * 17, 180, "白:");
	outtextxy(QiPanGeKuan * 17, 230, "步时: ");
	setfillcolor(LightBrown);
	fillrectangle(QiPanGeKuan, QiPanGeKuan, QiPanGeKuan * 15, QiPanGeKuan * 15);
	setlinecolor(BROWN);
	setlinestyle(PS_SOLID, 3, NULL, 0);
	for (int i = QiPanGeKuan; i <= Kuan; i += QiPanGeKuan)
	{
		line(i, QiPanGeKuan, i, Kuan);
		line(QiPanGeKuan, i, Kuan, i);
	}
	setfillcolor(BROWN);
	fillcircle(QiPanGeKuan * 8, QiPanGeKuan * 8, 6);
	fillcircle(QiPanGeKuan * 4, QiPanGeKuan * 4, 6);
	fillcircle(QiPanGeKuan * 4, QiPanGeKuan * 12, 6);
	fillcircle(QiPanGeKuan * 12, QiPanGeKuan * 4, 6);
	fillcircle(QiPanGeKuan * 12, QiPanGeKuan * 12, 6);
	return OK;
}


Status playgame(int Gomoku_CSBD[15][15])	//打游戏
{
	char str1[5];	//存步数数字的
	char str2[5];	//存步数数字的
	int bushu1 = 0, bushu2 = 0;
	int lie, hang;
	int i, j;
	for (i = 0; i < 15; i++) {
		for (j = 0; j < 15; j++) {
			Gomoku_CSBD[i][j] = 0;
		}
	}
	int play1 = 1;
	int win = 0;
	MOUSEMSG msg;
	i = j = 0;
	while (win == 0)
	{
		msg = GetMouseMsg();
		if (msg.uMsg == WM_LBUTTONDOWN)
		{
			for (lie = QiPanGeKuan; lie <= QiPanGeKuan * 15; lie += QiPanGeKuan)
			{
				if (msg.x <= lie + JingDu && msg.x >= lie - JingDu)
				{
					for (hang = QiPanGeKuan; hang <= QiPanGeKuan * 15; hang += QiPanGeKuan)
					{
						if (msg.y <= hang + JingDu && msg.y >= hang - JingDu)
						{
							if (play1 == 1 && Gomoku_CSBD[hang / QiPanGeKuan - 1][lie / QiPanGeKuan - 1] == 0)
							{
								setfillcolor(BLACK);	//黑方
								solidcircle(lie, hang, ChessPiecesSize);
								Gomoku_CSBD[hang / QiPanGeKuan - 1][lie / QiPanGeKuan - 1] = 1;
								play1 = 0;
								bushu1++;
								sprintf(str1, "%i", bushu1);
								outtextxy(520, 100, str1);
								break;
							}
							if (play1 == 0 && Gomoku_CSBD[hang / QiPanGeKuan - 1][lie / QiPanGeKuan - 1] == 0)
							{
								setfillcolor(WHITE);
								solidcircle(lie, hang, ChessPiecesSize);
								Gomoku_CSBD[hang / QiPanGeKuan - 1][lie / QiPanGeKuan - 1] = 2;
								play1 = 1;
								bushu2++;
								sprintf(str2, "%i", bushu2);
								outtextxy(520, 180, str2);
								break;
							}
						}
					}
				}
			}
		}
		//判断是否赢
		for (j = 0; j<9 && (win == 0); j++)
		{
			for (i = 0; i<6; i++)
			{

				if ((Gomoku_CSBD[j][i] == 1 && Gomoku_CSBD[j][i + 1] == 1 && Gomoku_CSBD[j][i + 2] == 1 && Gomoku_CSBD[j][i + 3] == 1 && Gomoku_CSBD[j][i + 4] == 1)
					|| (Gomoku_CSBD[i][j] == 1 && Gomoku_CSBD[i + 1][j] == 1 && Gomoku_CSBD[i + 2][j] == 1 && Gomoku_CSBD[i + 3][j] == 1 && Gomoku_CSBD[i + 4][j] == 1))//横纵是5个子plGomoku_CSBDy1 win
				{
					win = 1;
					break;
				}
				if ((Gomoku_CSBD[j][i] == 2 && Gomoku_CSBD[j][i + 1] == 2 && Gomoku_CSBD[j][i + 2] == 2 && Gomoku_CSBD[j][i + 3] == 2 && Gomoku_CSBD[j][i + 4] == 2)
					|| (Gomoku_CSBD[i][j] == 2 && Gomoku_CSBD[i + 1][j] == 2 && Gomoku_CSBD[i + 2][j] == 2 && Gomoku_CSBD[i + 3][j] == 2 && Gomoku_CSBD[i + 4][j] == 2))//横纵是5个子plGomoku_CSBDy2 win
				{
					win = 2;
					break;
				}
			}
		}
		for (j = 0; j<6 && (win == 0); j++)
		{
			for (i = 0; i<6; i++)
			{
				if (Gomoku_CSBD[j][i] == 1 && Gomoku_CSBD[j + 1][i + 1] == 1 && Gomoku_CSBD[j + 2][i + 2] == 1 && Gomoku_CSBD[j + 3][i + 3] == 1 && Gomoku_CSBD[j + 4][i + 4] == 1)//向右倾斜时候plGomoku_CSBDy1 win
				{
					win = 1;
					break;

				}
				if (Gomoku_CSBD[j][i] == 2 && Gomoku_CSBD[j + 1][i + 1] == 2 && Gomoku_CSBD[j + 2][i + 2] == 2 && Gomoku_CSBD[j + 3][i + 3] == 2 && Gomoku_CSBD[j + 4][i + 4] == 2)//向右倾斜时候plGomoku_CSBDy2 win
				{
					win = 2;
					break;
				}
			}
			for (i = 4; i<9 && (win == 0); i++)
			{
				if (Gomoku_CSBD[j][i] == 1 && Gomoku_CSBD[j + 1][i - 1] == 1 && Gomoku_CSBD[j + 2][i - 2] == 1 && Gomoku_CSBD[j + 3][i - 3] == 1 && Gomoku_CSBD[j + 4][i - 4] == 1)//向左倾斜时候plGomoku_CSBDy1 win
				{
					win = 1;
					break;
				}
				if (Gomoku_CSBD[j][i] == 2 && Gomoku_CSBD[j + 1][i - 1] == 2 && Gomoku_CSBD[j + 2][i - 2] == 2 && Gomoku_CSBD[j + 3][i - 3] == 2 && Gomoku_CSBD[j + 4][i - 4] == 2)//向左倾斜时候plGomoku_CSBDy2 win
				{
					win = 2;
					break;
				}
			}
		}
	}
	again(win, Gomoku_CSBD);
	return OK;
}

Status again(int index, int Gomoku_CSBD[15][15])
{
	settextstyle(20, 20, "宋体");
	settextcolor(YELLOW);
	if (index == 1)
	{
		outtextxy(220, 500, "play1 win!");
	}
	else
	{
		outtextxy(220, 500, "play2 win!");
	}
	int quit = MessageBox(NULL, "是否继续游戏", "ArchyLi", MB_YESNO);
	if (IDYES == quit)
	{
		cleardevice();
		DrawBackground();
		playgame(Gomoku_CSBD);
	}
	else
	{
		cleardevice();
		settextstyle(50, 30, "宋体");
		settextcolor(YELLOW);
		outtextxy(200, 300, "欢迎下次再来");
		Sleep(1000);
		return OK;
	}
}

//gomoku.h 12.2 15:50
#pragma once

typedef int Status;

#define OK 0
#define ERROR 1
#define QiPanGeKuan 40	//棋盘格宽
#define LightBrown 0x0088AA
#define JingDu 10	//落子判断精度，越大精度越低
#define ChessPiecesSize 15
#define BlackWin 1
#define WhiteWin 2
#define KeepPlaying 0

Status menu(int Gomoku_CSBD[15][15]);
Status DrawBackground();
Status playgame(int Gomoku_CSBD[15][15]);
Status again(int index, int Gomoku_CSBD[15][15]);
Status MoveByMouse(int Gomoku_CSBD[15][15]);	//鼠标落子
Status MoveByNum(int Gomoku_CSBD[15][15]);	//给定坐标落子
int WinOrNot();	//判断是否有人获胜，黑胜返回1，白胜返回2，否则返回0


////MessageBox.Show("是否保存", "提示", MessageBoxButtons.YesNo, 
	////MessageBoxIcon.None, MessageBoxDefaultButton.Button1, MessageBoxOptions.ServiceNotification)
	//int quit = MessageBox(NULL, "是否再下一局？", "提示", MB_YESNO);
	//if (IDYES == quit)
	//{
	//	cleardevice();
	//	menu(Gomoku_CSBD);
	//	playgame(Gomoku_CSBD);
	//}
	//else
	////{
	//	cleardevice();
	//	settextstyle(50, 30, "宋体");
	//	settextcolor(YELLOW);
	//	outtextxy(200, 300, "欢迎下次再来");
	//	Sleep(1000);
	//	return OK;
	//}

	void Clock::set(int hour, int min, int sec)
{
	h = hour;
	m = min;
	s = sec;
}

void Clock::tick()
{
	time_t t = time(NULL);//取得当前时间
	while (time(NULL) == t);	//过一秒
	if (--s < 0) {
		s = 59;
		if (--m < 0) {
			m = 59;
			--h < 0;
		}
	}
}

void Clock::show()
{
	cout << '\r';
	if (h<10)cout << 0;
	cout << h << ':';
	if (m<10)cout << 0;
	cout << m << ':';
	if (s<10)cout << 0;
	cout << s << flush;
}

void Clock::run()
{
	while (h != 0 || m != 0 || s != 0) {
		tick();
		show();
	}
	cout << endl << "Time out!" << endl;
	cout << '\a';
}

class Clock {
private:
	int h;
	int m;
	int s;
public:
	void set(int hour, int min, int sec);//set(int ,int ,int )
	void tick();
	void show();
	void run();
};